@using InternPortal.Client.Models
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http


<EditForm Model="@Intern" OnValidSubmit="@HandleValidSubmit" class="pa-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudGrid>
        @if (ShowInternId)
        {
            <MudItem xs="12" md="6" class="pa-2">
                <MudTextField Label="Id"
                              @bind-Value="IdString"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              Class="full-width" />
            </MudItem>
        }

        <MudItem xs="12" md="6" class="pa-2">
            <MudTextField Label="Имя"
                          @bind-Value="Intern.FirstName"
                          Variant="Variant.Outlined"
                          Required="true"
                          Class="full-width"
                          For="@(() => Intern.FirstName)" />
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudTextField Label="Фамилия"
                          @bind-Value="Intern.LastName"
                          Variant="Variant.Outlined"
                          Required="true"
                          Class="full-width"
                          For="@(() => Intern.LastName)" />
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudSelect Label="Пол"
                       For="@(() => Intern.Gender)"
                       @bind-Value="Intern.Gender"
                       Variant="Variant.Outlined"
                       Required="true"
                       Class="full-width">
                <MudSelectItem Value="@(Gender.Мужчина.ToString())">Мужчина</MudSelectItem>
                <MudSelectItem Value="@(Gender.Женщина.ToString())">Женщина</MudSelectItem>
            </MudSelect>
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudTextField Label="Email"
                          @bind-Value="Intern.Email"
                          Variant="Variant.Outlined"
                          Required="true"
                          Class="full-width"
                          For="@(() => Intern.Email)" />
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudTextField Label="Телефон"
                          @bind-Value="Intern.PhoneNumber"
                          Variant="Variant.Outlined"
                          Class="full-width"
                          InputMask="+7 000 000-00-00"
                          HelperText="Формат: +7 XXX XXX-XX-XX"
                          For="@(() => Intern.PhoneNumber)" />
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudDatePicker Label="Дата рождения"
                           @bind-Date="Intern.BirthDate"
                           Variant="Variant.Outlined"
                           Required="true"
                           Editable="true"
                           Class="full-width" />
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudAutocomplete Label="Направление"
                             T="string"
                             @bind-Value="Intern.Internship"
                             Variant="Variant.Outlined"
                             SearchFunc="@GetInternships"
                             CoerceText="true"
                             Required="true"
                             Class="full-width" />
        </MudItem>

        <MudItem xs="12" md="6" class="pa-2">
            <MudAutocomplete Label="Проект"
                             T="string"
                             @bind-Value="Intern.Project"
                             Variant="Variant.Outlined"
                             SearchFunc="@GetProjects"
                             CoerceText="true"
                             Required="true"
                             Class="full-width" />
        </MudItem>
    </MudGrid>

    <div class="d-flex justify-end mt-4">
        <MudButton Variant="Variant.Text"
                   Color="Color.Secondary"
                   Class="mr-2"
                   OnClick="Cancel">
            Отмена
        </MudButton>

        @if (ShowInternId)
        {
            <MudButton Variant="Variant.Text"
                       Color="Color.Error"
                       Class="mr-2"
                       OnClick="() => Delete(Intern.Id)">
                Удалить
            </MudButton>
        }

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   ButtonType="ButtonType.Submit">
            Сохранить
        </MudButton>
    </div>
</EditForm>

<style>
    .full-width {
        width: 100%;
    }
</style>

@code {
    [Parameter]
    public bool ShowInternId { get; set; } = false;

    [Parameter]
    public Func<Intern, Task<HttpResponseMessage>> SubmitAction { get; set; }

    [Parameter]
    public Intern Intern { get; set; } = new();

    private string IdString
    {
        get => Intern.Id.ToString();
        set => Intern.Id = Guid.TryParse(value, out var guid) ? guid : Guid.Empty;
    }

    private List<string> Internships { get; set; } = new();
    private List<string>? ProjectNames { get; set; } = new();

    private async Task<IEnumerable<string>> GetInternships(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return Internships;

        return Internships.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> GetProjects(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return ProjectNames;

        return ProjectNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected override async Task OnInitializedAsync()
    {
        Internships = (await Http.GetFromJsonAsync<PagedInternships>("/api/Internship/GetAll")).Internships.Select(x => x.Name).ToList();
        ProjectNames = (await Http.GetFromJsonAsync<PagedProjects>("/api/Project/GetAll")).Projects.Select(x => x.Name).ToList();
    }

    private async Task HandleValidSubmit()
    {
        Intern.BirthDate = DateTime.SpecifyKind((DateTime)Intern.BirthDate, DateTimeKind.Utc);
        var response = await SubmitAction(Intern);


        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Запись успешно добавлена", Severity.Success);
            if (ShowInternId)
                Navigation.NavigateTo("/interns");
            else
                Navigation.NavigateTo("/");

        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Snackbar.Add("Ошибка при добавлении", Severity.Error);
            Console.WriteLine($"Ошибка: {errorMessage}");
        }
    }

    private void Cancel()
    {
        if (ShowInternId)
            Navigation.NavigateTo("/interns");
        else
            Navigation.NavigateTo("/");

    }

    private async Task Delete(Guid id)
    {

        var response = await Http.DeleteAsync($"/api/Intern/Delete/{id}");

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Запись успешно сохранена", Severity.Success);
            Navigation.NavigateTo("/interns");
        }
        else
        {
            Snackbar.Add("Ошибка при удалении", Severity.Error);
        }
    }
}