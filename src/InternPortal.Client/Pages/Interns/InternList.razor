@page "/interns"
@using InternPortal.Client.Components.SignalR
@using Microsoft.AspNetCore.WebUtilities
@using InternPortal.Client.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IConfiguration Configuration


<MudCard Class="mb-4">
    <MudCardContent>
        <MudGrid Justify="Justify.FlexStart" Spacing="2">
            <MudItem xs="12" sm="6" md="4">
                <MudSelect T="string" Label="Направление" @bind-Value="SelectedInternship"
                           Variant="Variant.Outlined" Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter" Clearable="true">
                    @foreach (var internship in AvailableInternships)
                    {
                        <MudSelectItem Value="@internship">@internship</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect T="string" Label="Проект" @bind-Value="SelectedProject"
                           Variant="Variant.Outlined" Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter" Clearable="true">
                    @foreach (var project in AvailableProjects)
                    {
                        <MudSelectItem Value="@project">@project</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" Class="d-flex align-center">
                <MudButton OnClick="ApplyFilters" Variant="Variant.Filled"
                           Color="Color.Primary" Class="ml-auto" EndIcon="@Icons.Material.Filled.Search">
                    Применить
                </MudButton>
                <MudButton OnClick="ResetFilters" Variant="Variant.Text"
                           Color="Color.Secondary" Class="ml-2" EndIcon="@Icons.Material.Filled.Clear">
                    Сбросить
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudPaper Elevation="3" Class="pa-4">
    <MudTable Items="@FilteredInterns" Hover="true" Striped="true" Bordered="true"
              Dense="true" Breakpoint="Breakpoint.None" Class="rounded-lg">
        <HeaderContent>
            <MudTh Style="width: 15%;">ФИО</MudTh>
            <MudTh Style="width: 10%;">Дата рождения</MudTh>
            <MudTh Style="width: 8%;">Пол</MudTh>
            <MudTh Style="width: 15%;">Email</MudTh>
            <MudTh Style="width: 12%;">Номер</MudTh>
            <MudTh Style="width: 15%;">Направление</MudTh>
            <MudTh Style="width: 15%;">Проект</MudTh>
            <MudTh Style="width: 10%; text-align: center;">Действия</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ФИО" Class="font-weight-bold">@($"{context.LastName} {context.FirstName}")</MudTd>
            <MudTd DataLabel="Дата рождения">@context.BirthDate.ToString("dd.MM.yyyy")</MudTd>
            <MudTd DataLabel="Пол">@(Enum.Parse<Gender>(context.Gender))</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Номер">@(string.IsNullOrEmpty(context.PhoneNumber) ? "Отсутствует" : context.PhoneNumber)</MudTd>
            <MudTd DataLabel="Направление">@context.Internship</MudTd>
            <MudTd DataLabel="Проект">@context.Project</MudTd>
            <MudTd DataLabel="Действие" Style="text-align: center;">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               Title="Редактировать"
                               OnClick="@(() => OpenDialogAsync(context))" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Align="Align.Center" Typo="Typo.h6" Class="my-4">Нет данных для отображения</MudText>
        </NoRecordsContent>
    </MudTable>
</MudPaper>


@code {
    private InternHub? InternHub;

    private List<Intern> AllInterns = new();

    private List<Intern> FilteredInterns = new();

    private List<string> AvailableInternships = new();

    private List<string> AvailableProjects = new();

    private string? SelectedInternship;

    private string? SelectedProject;

    protected override async Task OnInitializedAsync()
    {
        InternHub = new InternHub(Configuration);

        InternHub.Receiver<Intern>("Receive", intern =>
        {
            AllInterns.Add(intern);
            ApplyFilters();
            InvokeAsync(StateHasChanged);
        });

        InternHub.Receiver<Intern>("ReceiveEdit", intern =>
        {
            AllInterns[AllInterns.FindIndex(x => x.Id == intern.Id)] = intern;
            ApplyFilters();
            InvokeAsync(StateHasChanged);
        });

        InternHub.Receiver<Guid>("ReceiveDelete", (id) =>
        {
            AllInterns.RemoveAt(AllInterns.FindIndex(x => x.Id == id));
            ApplyFilters();
            InvokeAsync(StateHasChanged);
        });

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Internship", out var internship))
            SelectedInternship = internship.First();
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("Project", out var project))
            SelectedProject = project.First();

        await LoadData();
        ApplyFilters();
    }

    private async Task LoadData()
    {
        AllInterns = await Http.GetFromJsonAsync<List<Intern>>("api/Intern/GetAll") ?? new();
        AvailableInternships = AllInterns.Select(i => i.Internship).Distinct().ToList();
        AvailableProjects = AllInterns.Select(i => i.Project).Distinct().ToList();
    }

    private void ApplyFilters()
    {
        var queryParams = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(SelectedInternship))
            queryParams["Internship"] = SelectedInternship;
        if (!string.IsNullOrEmpty(SelectedProject))
            queryParams["Project"] = SelectedProject;

        Navigation.NavigateTo(QueryHelpers.AddQueryString("/interns", queryParams));

        FilteredInterns = AllInterns.Where(i => (SelectedInternship == null || i.Internship == SelectedInternship)
            && (SelectedProject == null || i.Project == SelectedProject)).ToList();
    }

    private void ResetFilters()
    {
        SelectedInternship = null;
        SelectedProject = null;
        FilteredInterns = AllInterns;
        Navigation.NavigateTo("/interns");
    }

    private Task OpenDialogAsync(Intern intern)
        => DialogService.ShowAsync<InternDialog>("Обновить данные стажёра",
            new DialogParameters<InternDialog> { { x => x.Intern, intern } });
}