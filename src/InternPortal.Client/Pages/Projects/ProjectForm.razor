@using InternPortal.Client.Models;
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http


<EditForm Model="@Project" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Class="mb-4" />

    <MudGrid Spacing="2" Justify="Justify.FlexStart">
        @if (ShowProjectId)
        {
            <MudItem xs="12" md="6">
                <MudTextField Label="Id"
                              Variant="Variant.Outlined"
                              @bind-Value="IdString"
                              ReadOnly="true"
                              Margin="Margin.Dense"
                              Class="mb-4" />
            </MudItem>
        }

        <MudItem xs="12" md="6">
            <MudTextField Label="Имя"
                          Variant="Variant.Outlined"
                          @bind-Value="Project.Name"
                          Required="true"
                          RequiredError="Поле обязательно для заполнения"
                          Margin="Margin.Dense"
                          Class="mb-4" />
            <ValidationMessage For="@(() => Project.Name)" />
        </MudItem>

        <MudItem xs="12">
            <MudSelect T="Guid"
                       Label="Выберите стажеров"
                       Variant="Variant.Outlined"
                       MultiSelection="true"
                       AnchorOrigin="Origin.BottomCenter"
                       @bind-SelectedValues="selectedInternIds"
                       Margin="Margin.Dense"
                       Class="mb-4">
                @foreach (var intern in Interns)
                {
                    <MudSelectItem T="Guid"
                                   Value="@intern.Id"
                                   Disabled="@(selectedInternIds.Contains(intern.Id) && !CanDeselect)">
                        @intern.FullName
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-end mt-4">
            <div class="d-flex gap-2">
                <MudButton Variant="Variant.Text"
                           Color="Color.Secondary"
                           OnClick="Cancel"
                           StartIcon="@Icons.Material.Filled.Cancel"
                           Class="ml-2">
                    Отмена
                </MudButton>

                @if (ShowProjectId)
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Error"
                               OnClick="() => Delete(Project.Id)"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Class="ml-2">
                        Удалить
                    </MudButton>
                }

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           ButtonType="ButtonType.Submit"
                           StartIcon="@Icons.Material.Filled.Save"
                           Class="ml-2">
                    Сохранить
                </MudButton>
            </div>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public Project Project { get; set; } = new();

    [Parameter]
    public bool ShowProjectId { get; set; } = false;

    [Parameter]
    public Func<Project, Task<HttpResponseMessage>> SubmitAction { get; set; }

    private List<InternForList> Interns { get; set; } = new();

    private IEnumerable<Guid> selectedInternIds = new HashSet<Guid>();

    private bool CanDeselect = false;

    private string IdString
    {
        get => Project.Id.ToString();
        set => Project.Id = Guid.TryParse(value, out var guid) ? guid : Guid.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        Interns = await Http.GetFromJsonAsync<List<InternForList>>("/api/Intern/GetAll");
        if (ShowProjectId)
            selectedInternIds = Project.Interns;
    }

    private async Task HandleValidSubmit()
    {
        Project.Interns = selectedInternIds.ToList();
        var response = await SubmitAction(Project);


        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/entities");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Ошибка: {errorMessage}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/entities");
    }

    private async Task Delete(Guid id)
    {

        var response = await Http.DeleteAsync($"/api/Project/DeleteById/{id}");

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Запись успешно удалена", Severity.Success);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();

            var firstLine = errorContent.Split('\n').FirstOrDefault()?.Trim();

            var cleanMessage = firstLine?.Replace("System.Exception: ", "");

            Snackbar.Add(cleanMessage ?? "Неизвестная ошибка", Severity.Error);
        }
    }
}