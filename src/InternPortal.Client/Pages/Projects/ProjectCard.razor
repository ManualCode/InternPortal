@using Microsoft.AspNetCore.WebUtilities
@using InternPortal.Client.Models
@inject NavigationManager Navigation
@inject HttpClient Http
@using MudBlazor
@using InternPortal.Client.Pages.Interns
@inject IDialogService DialogService
@using InternPortal.Client.Pages.Internships


<MudPaper Elevation="10" Class="pa-4 ma-4 rounded-lg">
    <MudCard Style="border-radius: 12px;">
        <MudCardContent>
            <MudGrid Class="mb-4" Spacing="2">
                <MudItem xs="12" sm="8" md="9">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField Value="@Filter"
                                          Label="Поиск по названию"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search"
                                          Class="full-width"
                                          ValueChanged="@((string filter) => OnFilterChanged(filter))"/>
                        </MudItem>

                        <MudItem xs="12" sm="6" md="4">
                            <MudSelect Value="@OrderBy"
                                       Label="Сортировать по"
                                       Variant="Variant.Outlined"
                                       Adornment="Adornment.Start"
                                       AdornmentIcon="@Icons.Material.Filled.Sort"
                                       ValueChanged="@((string orderBy) => OnOrderByChanged(orderBy))"
                                       Clearable="true"
                                       Class="full-width">
                                <MudSelectItem Value='"Name"'>Название</MudSelectItem>
                                <MudSelectItem Value='"Interns"'>Количество стажёров</MudSelectItem>
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" sm="6" md="4" Class="d-flex align-center">
                            <MudCheckBox Label="По убыванию"
                                         T="bool?"
                                         LabelPlacement="Placement.End"
                                         Value="@SortDirection"
                                         Color="Color.Primary"
                                         ValueChanged="@((bool? sortDirection) => OnSortDirectionChanged(sortDirection))"
                                         Class="ml-2" />
                        </MudItem>
                    </MudGrid>
                </MudItem>

                <MudItem xs="12" sm="4" md="3" Class="d-flex justify-end align-center">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="(()=> CreateDialogAsync(new Project()))"
                               Class="ml-auto">
                        Добавить проект
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudTable Items="@Project"
                      Hover="true"
                      Striped="true"
                      Bordered="true"
                      Elevation="5"
                      RowsPerPage="@PageSize"
                      Class="rounded-lg">

                <HeaderContent>
                    <MudTh>Название</MudTh>
                    <MudTh>Стажёры</MudTh>
                    <MudTh>Действия</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Название">
                        <MudText Typo="Typo.body1">@context.Name</MudText>
                    </MudTd>

                    <MudTd DataLabel="Стажёры">
                        <MudMenu Direction="Direction.Bottom" OffsetY="true">
                            <ActivatorContent>
                                <MudBadge Color="Color.Primary"
                                          Content="@context.Interns.Count"
                                          Style="cursor: pointer"
                                          Class="ma-2" 
                                          @onclick="(()=> GetInterns(context.Interns))"/>
                            </ActivatorContent>
                            <ChildContent>
                                @if (context.Interns.Any())
                                {
                                    @foreach (var intern in AvailableInterns)
                                    {
                                        <MudMenuItem @onclick="(() => OpenInternDialogAsync(intern))">@intern.FullName</MudMenuItem>
                                    }
                                }
                                else
                                {
                                    <MudMenuItem Disabled="true">Нет стажёров</MudMenuItem>
                                }
                            </ChildContent>
                        </MudMenu>
                    </MudTd>

                    <MudTd DataLabel="Действиt">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       OnClick="@(() => UpdateDialogAsync(context))" />
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudContainer Class="d-flex align-center justify-end mt-4" Style="gap: 16px;">
                        <MudText Typo="Typo.caption">Элементов на странице:</MudText>
                        <MudSelect T="int" Value="@PageSize" Immediate="true" Variant="Variant.Outlined"
                                   ValueChanged="@OnPageSizeChanged" Class="flex-none" Style="width: 80px">
                            <MudSelectItem Value="5">5</MudSelectItem>
                            <MudSelectItem Value="10">10</MudSelectItem>
                            <MudSelectItem Value="25">25</MudSelectItem>
                        </MudSelect>
                        <MudPagination Count="@PageCount" SelectedChanged="@OnPageChanged"
                                       Variant="Variant.Text" Color="Color.Primary" Class="flex-none" />

                        <MudText Typo="Typo.body2">Перейти на:</MudText>

                        <MudNumericField Value="Page"
                                      Min="1"
                                      Max="@PageCount"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Number"
                                      Immediate="true"
                                      Class="flex-none"
                                      Style="width: 80px"
                                      ValueChanged="@((int newPage) => OnPageChanged(newPage))" />
                    </MudContainer>
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudPaper>

<style>
    .full-width {
        width: 100%;
    }

    .mud-table-cell {
        vertical-align: middle;
    }
</style>

@code{
    private List<Project> Project = new();

    private List<InternForList?> AvailableInterns = new();

    private string? Filter { get; set; }

    private string? OrderBy { get; set; }

    private bool? SortDirection { get; set; } = false;

    private int Page { get; set; } = 1;

    private int PageSize { get; set; } = 5;

    private int PageCount { get; set; }

    private string? SortDirectionString
    {
        get
        {
            if (SortDirection == null) return null;
            return SortDirection.Value ? "1" : "0";
        }
        set => SortDirection = SortDirectionString == "1";
    }

    private async Task OnOrderByChanged(string orderBy)
    {
        OrderBy = orderBy;
        await LoadData();
    }

    private async Task OnSortDirectionChanged(bool? sortDirection)
    {
        SortDirection = sortDirection;
        await LoadData();
    }

    private async Task OnFilterChanged(string filter)
    {
        Filter = filter;
        await LoadData();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        PageSize = newPageSize;
        await LoadData();
    }

    private async Task OnPageChanged(int newPage)
    {
        Page = newPage;
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("name", out var name))
            Filter = name.First();
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("orderBy", out var orderBy))
            OrderBy = orderBy.First();
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sortDirection", out var sortDirection))
            SortDirectionString = sortDirection.First();
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var page))
            Page = int.Parse(page.First());
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var pageSize))
            PageSize = int.Parse(pageSize.First());

        await LoadData();
    }

    private async Task LoadData()
    {
        var queryParams = new Dictionary<string, string>();
        queryParams["entity"] = "projects";
        if (!string.IsNullOrEmpty(Filter))
            queryParams["name"] = Filter;
        if (!string.IsNullOrEmpty(OrderBy))
            queryParams["orderBy"] = OrderBy;
        if (!string.IsNullOrEmpty(SortDirectionString))
            queryParams["sortDirection"] = SortDirectionString;
        if (!string.IsNullOrEmpty(Page.ToString()))
            queryParams["page"] = Page.ToString();
        if (!string.IsNullOrEmpty(PageSize.ToString()))
            queryParams["pageSize"] = PageSize.ToString();

        Navigation.NavigateTo(QueryHelpers.AddQueryString("/entities", queryParams));

        var response = await Http.GetFromJsonAsync<PagedProjects>(QueryHelpers.AddQueryString("api/Project/GetAll", queryParams));
        PageCount = (response.TotalCount + PageSize - 1) / PageSize;
        Project = response.Projects;
    }

    private async Task GetInterns(List<Guid> internIds)
    {
        var interns = new List<InternForList?>();
        foreach (var id in internIds)
            interns.Add(await Http.GetFromJsonAsync<InternForList>($"api/Intern/GetById/{id}"));

        AvailableInterns = interns;
    }

    private Task OpenInternDialogAsync(InternForList intern)
    {
        var currentIntern = new Intern
        {
            Id = intern.Id,
            FirstName = intern.FullName.Split(' ')[0],
            LastName = intern.FullName.Split(' ')[1],
            Gender = intern.Gender.ToString(),
            Email = intern.Email,
            PhoneNumber = intern.PhoneNumber,
            BirthDate = intern.BirthDate,
            Internship = intern.Internship.Name,
            Project = intern.Project.Name,
            CreateAt = intern.CreateAt,
            UpdateAt = intern.UpdateAt
        };
        return DialogService.ShowAsync<EditDialog>("Обновить стажёра",
            new DialogParameters<EditDialog> { { x => x.Intern, currentIntern } });
    }

    private Task CreateDialogAsync(Project internship)
        => DialogService.ShowAsync<ProjectDialog>("Добавить проект",
            new DialogParameters<ProjectDialog> { { x => x.Project, internship },
            { x => x.SubmitAction, HandleCreate }, { x => x.ShowProjectId, false } });

    private Task UpdateDialogAsync(Project project)
        => DialogService.ShowAsync<ProjectDialog>("Обновить проект",
            new DialogParameters<ProjectDialog> { { x => x.Project, project },
            { x => x.SubmitAction, HandleUpdate }, { x => x.ShowProjectId, true} });
    

    private async Task<HttpResponseMessage> HandleCreate(Project project)
        => await Http.PostAsJsonAsync($"api/Project/Create", project);
    

    private async Task<HttpResponseMessage> HandleUpdate(Project project)
        => await Http.PutAsJsonAsync($"api/Project/Update/{project.Id}", project);
}